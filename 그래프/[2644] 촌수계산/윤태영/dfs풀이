import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Main {

	static int n; // 전체사람의수 
	static ArrayList<Integer>list[];
	static boolean invisited[];
	static int x;//관계비교할 x,y
	static int y;
	static int cnt;
	static int count; // 부모자식간 관계의 개수 
	static int answer;
	public static void main(String[]args)throws IOException{
	BufferedReader br=new BufferedReader(new InputStreamReader(System.in));		
	StringTokenizer st=new StringTokenizer(br.readLine());
	n=Integer.parseInt(st.nextToken()); // 전체 사람의 수
	st=new StringTokenizer(br.readLine());
	x=Integer.parseInt(st.nextToken());
	y=Integer.parseInt(st.nextToken()); 
	st=new StringTokenizer(br.readLine());
	count=Integer.parseInt(st.nextToken());
	invisited=new boolean[n+1];
	list=new ArrayList[n+1];
	for(int x=1;x<=n;x++) {		
		list[x]=new ArrayList<Integer>();		
	}
	for(int i=0; i<count;i++) {
		st=new StringTokenizer(br.readLine());
	    int a=Integer.parseInt(st.nextToken());
	    int b=Integer.parseInt(st.nextToken());
		list[a].add(b);
		list[b].add(a);		
	}
	answer=-1;
	cnt=0;
	DFS(x,cnt);
	
	
	System.out.println(answer);
		
	}

    static void DFS(int s,int cnt) {
    	invisited[s]=true;
    	//재귀를 돌때 cnt++이라고 하면 cnt++이 된 상태로 다시 돌아와서 dfs를 하기때문에 cnt+1이라고 하여서 원래 값으로 되돌아 가줘야한다
    	for(int a:list[s]) {
    		if(invisited[a]==false && a!=y) {

    			DFS(a,cnt+1);  			
    		}else if(a==y) {
    		    
    		    answer=cnt+1;
    		    break;
    		}    		
    		
    	}
   	
    }

}
