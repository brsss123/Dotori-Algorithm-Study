import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	
	static int F;// 총 f층
	static int G;//스타트 링크가 있는 곳
	static int S; // 현재 있는 곳
	static int U;// 위로 U층
	static int D;// 아래도 D층
	static int invisited[];
	static int cnt;
	static String result;
	static int limit=0;
	public static void main(String[]args)throws IOException{
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st=new StringTokenizer(br.readLine());
		F=Integer.parseInt(st.nextToken());
		S=Integer.parseInt(st.nextToken());
		G=Integer.parseInt(st.nextToken());
		U=Integer.parseInt(st.nextToken());
		D=Integer.parseInt(st.nextToken());
		
		invisited=new int[F+1];
		BFS(S);
		
	}
	static void BFS(int s) {
	   Queue<Integer>q=new LinkedList<>();
	   invisited[s]=1;
	   q.add(s);   
	   while(!q.isEmpty()) {
		   int cur= q.poll(); //현재층
	
		   if(cur==G) {
			   System.out.println(invisited[cur]-1);
		   }		   
		   //현재층이 스타트링크 보다 높으면
		    if(cur-D>0 && invisited[cur-D]==0) {			   
			   invisited[cur-D]=invisited[cur]+1;
			   q.add(cur-D); 
		   }
		    if(cur+U<=F&&invisited[cur+U]==0){
			   invisited[cur+U]=invisited[cur]+1;
			   q.add(cur+U);
		   }
	}
	  
	   if(invisited[G]==0) {
		   System.out.println("use the stairs");
	   }
	
	        
	}
}
